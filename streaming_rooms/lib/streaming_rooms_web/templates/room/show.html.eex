<h2><%= @room.name %></h2>
<!--
<div id="user_id" data-url="<%= @current_user.id %>"></div> -->

<div id="room_id" data-url="<%= @room.id %>"></div>
<div id="youtube_id" data-url="<%= @room.youtube_link %>"></div>
<div id="soundcloud_id" data-url="<%= @room.soundcloud_link %>"></div>

<div>
    <% alias StreamingRooms.Rooms %>
    Youtube streams: <%= Rooms.get_youtube_streams_in_room(@room.id) %>
    Soundcloud streams: <%= Rooms.get_soundcloud_streams_in_room(@room.id) %>

    <%=  response = Rooms.get_users_that_stream_the_most(@room.id) 
        if response != [] do %>
            Users that stream the most: 
            <%= Rooms.get_users_that_stream_the_most(@room.id) 
                |> Enum.map(fn {k, _v} -> k end) %>
    <% end %>
</div>

<!-- Here's going to be the video -->
<div id="youtube_player"></div>

<iframe id="soundcloud_player" width="400px" height="166px" scrolling="no" frameborder="no"
    src="https://w.soundcloud.com/player/?url=<%= @room.soundcloud_link %>">
</iframe>

<!-- YOUTUBE SCRIPT -->
<script type="text/javascript">

    // The base code was gotten from the Youtube official page: https://developers.google.com/youtube/iframe_api_reference

    // This code loads the IFrame Player API code asynchronously.
    var tag = document.createElement('script');
    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    var videoId = document.getElementById("youtube_id").getAttribute("data-url");
    var roomId = document.getElementById("room_id").getAttribute("data-url");
    var url = "/api/rooms_users/" + roomId + "/youtube";

    // This function creates an <iframe> (and YouTube player) after the API code downloads.
    var youtubePlayer;
    function onYouTubeIframeAPIReady() {
          youtubePlayer = new YT.Player('youtube_player', {
            height: '390',
            width: '640',
            videoId: videoId,
            events: {
              'onReady': onPlayerReady,
              'onStateChange': onPlayerStateChange
            }
        });
    }

    // The API will call this function when the video player is ready.
    function onPlayerReady(event) {
      event.target.playVideo();
    }

    // Variables useful for when the state changes
    var endedAfterEnoughTime = false;
    var timeoutVariable;
    var youtubeDuration;
    var timeYoutubeTimerStarted;
    var timeElapsedOfYoutubeTimer = 0;
    var totalYoutubeTime = 0;

    function onPlayerStateChange(event) {
        state = event.data
        if (state == YT.PlayerState.ENDED){
            clearTimeout(timeoutVariable);
            timeoutVariable = undefined;
            totalYoutubeTime = 0;
            timeElapsedOfYoutubeTimer = 0;
            if (endedAfterEnoughTime){
                console.log("Stream counts!");
                $.ajax({
                    url: url,
                    type: 'PATCH',
                    success: function(res) {
                        var responseMessage = JSON.parse(res);
                        if (responseMessage["result"] == "ok"){

                        }
                    },
                    error: function(xhr, ajaxOptions, thrownError) {
                        var responseMessage = JSON.parse(xhr.responseText);
                        console.log("COULD NOT INCREMENT: " + responseMessage["message"]);
                    }
                });
            }else{
                console.log("Stream doesn't count!");
            }
            youtubePlayer.loadVideoById(videoId);
        }else if (state == YT.PlayerState.PAUSED){
            timeElapsedOfYoutubeTimer = (new Date()).getTime() - timeYoutubeTimerStarted;
            totalYoutubeTime += timeElapsedOfYoutubeTimer;
            clearTimeout(timeoutVariable);
            timeoutVariable = undefined;
        }else if (state == YT.PlayerState.PLAYING){
            endedAfterEnoughTime = false;
            if (!youtubeDuration && youtubePlayer.getDuration() > 0){
                youtubeDuration = (youtubePlayer.getDuration() - 1) * 1000;
            }
            timeYoutubeTimerStarted = (new Date()).getTime();
            if (!timeoutVariable){
                timeoutVariable = setTimeout(function(){ endedAfterEnoughTime = true; }, youtubeDuration - totalYoutubeTime);
            }
        }
    }

</script>

<!--
    <ul>
        <li>
          <strong>Name:</strong>
          <%= @room.name %>
        </li>
        <li>
          <strong>Soundcloud link:</strong>
          <%= @room.soundcloud_link %>
        </li>
        <li>
          <strong>Youtube link:</strong>
          <%= @room.youtube_link %>
        </li>
    </ul>
-->